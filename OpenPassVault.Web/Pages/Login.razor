@page "/login"
@using OpenPassVault.Shared.DTO
@using OpenPassVault.Web.Providers
@inject NavigationManager NavigationManager
@inject JwtAuthenticationStateProvider AuthenticationStateStateProvider

<PageTitle>Log ind</PageTitle>

<div class="card">
    <h4 class="card-header">Log ind</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group mt-2">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="mt-4">
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Log ind
                </button>
                <NavLink href="@Urls.Register" class="btn btn-link">Mangler du en konto? Opret dig!</NavLink>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest model = new();
    private bool loading;
    
    protected override void OnInitialized()
    {
        if (AuthenticationStateStateProvider.CurrentUser != null)
        {
            NavigationManager.NavigateTo(Urls.VaultIndex);
        }
    }

    private async void OnValidSubmit(EditContext editContext)
    {
        loading = true;
        await AuthenticationStateStateProvider.AuthenticateUser(model);
        loading = false;
        StateHasChanged();
        
        if (AuthenticationStateStateProvider.CurrentUser == null)
        {
            NavigationManager.NavigateTo(Urls.VaultIndex);
        }
        else
        {
            var messageStore = new ValidationMessageStore(editContext);
            messageStore.Add(() => model.Email!, "");
            messageStore.Add(() => model.Password!, "Log ind mislykkedes!");
            editContext.NotifyValidationStateChanged();
        }
    }
}


