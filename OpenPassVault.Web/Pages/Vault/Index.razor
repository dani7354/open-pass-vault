@page "/vault"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject ISecretService SecretService

<PageTitle>Passwords</PageTitle>

<ErrorAlert ErrorMessage="@errorMessage" />

@if (_secrets is { Count: > 0 })
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th aria-label="Navn">Navn</th>
            <th aria-label="Type">Type</th>
            <th aria-label="Brugernavn">Brugernavn</th>
            <th aria-label="Password">Secret</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var s in _secrets)
        {
            <tr>
                <td>@s.Id</td>
                <td>@s.Name</td>
                <td>@_secretTypeTranslations[s.Type]</td>
                <td>@s.Username</td>
                <td>@s.ContentDecrypted</td>
                <td>
                    <button class="btn btn-sm btn-primary" disabled="@_busy" 
                            onclick="@(async () => await DecryptAndShowSecret(s.Id))">Vis</button>
                    <button class="btn btn-sm btn-danger" disabled="@_busy" 
                            onclick="@(async () => await DeleteSecret(s.Id))">Slet</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info" role="alert">
        <p>You have no passwords yet.</p>
    </div>
}
<button class="btn btn-secondary" disabled="@_busy" onclick="@(async () => await RefreshSecrets())">Opdatér</button>
<NavLink class="btn btn-primary" disabled="@_busy" href="/vault/create">Opret</NavLink>

@code {
    private bool _busy;
    private string? errorMessage;
    private IList<SecretListItemResponse>? _secrets;
    private IDictionary<string, string> _secretTypeTranslations = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SetBusyState(true);
            _secrets = await SecretService.ListSecrets();
            _secretTypeTranslations = (await SecretService.GetSecretTypes())
                .ToDictionary(x => x.Value, x => x.Name);
        }
        catch
        {
            errorMessage = "Fejl ved indlæsning af passwords. Kom igen en anden gang.";
            StateHasChanged();
        }
        finally
        {
            SetBusyState(false);
        }
    }

    private async Task DecryptAndShowSecret(string secretId)
    {
        try
        {
            SetBusyState(true);
            var secret = await SecretService.GetSecret(secretId);
            if (secret == null)
                return;

            var decryptedSecret = await SecretService.DecryptSecretContent(secret.Content);
            var secretToUpdate = _secrets?.FirstOrDefault(x => x.Id == secretId);
            if (secretToUpdate != null)
            {
                secretToUpdate.ContentDecrypted = decryptedSecret;
                StateHasChanged();
            }
        }
        catch
        {
            errorMessage = "En fejl opstod under dekryptering af password. Prøv igen.";
            StateHasChanged();
        }
        finally
        {
            SetBusyState(false);
        }
    }
    
    private async Task DeleteSecret(string secretId)
    {
        try
        {
            SetBusyState(true);
            await SecretService.DeleteSecret(secretId);
            await RefreshSecrets();

        }
        catch (Exception)
        {
            errorMessage = "En fejl opstod under sletning af password. Prøv igen.";
            StateHasChanged();
        }
        finally
        {
            SetBusyState(false);
        }
    }
    
    private async Task RefreshSecrets()
    {
        SetBusyState(true);
        _secrets = await SecretService.ListSecrets();
        SetBusyState(false);
    }
    
    private void SetBusyState(bool isBusy)
    {
        _busy = isBusy;
        StateHasChanged();
    }
}